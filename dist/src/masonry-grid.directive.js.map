{"version":3,"file":"masonry-grid.directive.js","sourceRoot":"","sources":["../../src/masonry-grid.directive.ts"],"names":[],"mappings":";;;;AAKA,OAAO,EACH,SAAS,EACT,MAAM,EACN,UAAU,EACV,UAAU,EAGV,WAAW,EACZ,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAChE,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;;IAalD,8BACU,QAAoB,EAEpB,SACqB;QAHrB,aAAQ,GAAR,QAAQ,CAAY;QAEpB,YAAO,GAAP,OAAO;QACc,eAAU,GAAV,UAAU;KACrC;IAEJ,8CAAe,GAAf;QACE,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5B;KACF;IAED,0CAAW,GAAX;QACE,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;SAClD;KACF;IAED,6EAA6E;;IACrE,kDAAmB;IAA3B;QACE,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,sBAAsB,CAAC;QAE5E,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;;YAErB,IAAI,MAAI,GAAG,IAAI,CAAC;YAChB,IAAI,QAAQ,GAAG,IAAI,gBAAgB,CAAC,UAClC,SAAS,EACT,mBAAmB;gBAEnB,MAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;aACvB,CAAC,CAAC;;;YAIH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;gBAC5C,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;SACJ;KACF;;gBA5CF,SAAS,SAAC;oBACT,QAAQ,EAAE,wCAAwC;iBACnD;;;;gBAnBC,UAAU;gBAOH,oBAAoB,uBAgBxB,MAAM,SAAC,UAAU,CAAC,cAAM,OAAA,oBAAoB,EAApB,CAAoB,CAAC;gDAE7C,MAAM,SAAC,WAAW;;+BAjCzB;;SA4Be,oBAAoB","sourcesContent":["/**\r\n * Shailendra Kumar <shailu.snist@gmail.com>\r\n * @ignore\r\n */\r\n\r\nimport {\r\n    Directive,\r\n    Inject,\r\n    ElementRef,\r\n    forwardRef,\r\n    OnDestroy,\r\n    AfterViewInit,\r\n    PLATFORM_ID\r\n  } from '@angular/core';\r\n  \r\n  import { MasonryGridComponent } from './masonry-grid.component';\r\n  import { isPlatformBrowser } from '@angular/common';\r\n  \r\n  interface MutationWindow extends Window {\r\n    MutationObserver: any;\r\n    WebKitMutationObserver: any;\r\n  }\r\n  \r\n  declare var window: MutationWindow;\r\n  \r\n  @Directive({\r\n    selector: '[masonry-grid-item], masonry-grid-item'\r\n  })\r\n  export class MasonryGridDirective implements OnDestroy, AfterViewInit {\r\n    constructor(\r\n      private _element: ElementRef,\r\n      @Inject(forwardRef(() => MasonryGridComponent))\r\n      private _parent: MasonryGridComponent,\r\n      @Inject(PLATFORM_ID) private platformId: any\r\n    ) {}\r\n  \r\n    ngAfterViewInit() {\r\n      if (isPlatformBrowser(this.platformId)) {        \r\n        this.watchForHtmlChanges();\r\n      }\r\n    }\r\n  \r\n    ngOnDestroy() {\r\n      if (isPlatformBrowser(this.platformId)) {\r\n        this._parent.remove(this._element.nativeElement);\r\n      }\r\n    }\r\n  \r\n    /** When HTML in brick changes dynamically, observe that and change layout */\r\n    private watchForHtmlChanges(): void {\r\n      MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\r\n  \r\n      if (MutationObserver) {\r\n        /** Watch for any changes to subtree */\r\n        let self = this;\r\n        let observer = new MutationObserver(function(\r\n          mutations,\r\n          observerFromElement\r\n        ) {\r\n          self._parent.layout();\r\n        });\r\n  \r\n        // define what element should be observed by the observer\r\n        // and what types of mutations trigger the callback\r\n        observer.observe(this._element.nativeElement, {\r\n          subtree: true,\r\n          childList: true\r\n        });\r\n      }\r\n    }\r\n  }\r\n  "]}